// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc571.emmet.commands;
import edu.wpi.first.wpilibj.GenericHID.Hand;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc571.emmet.subsystems.DriveTrain;
import org.usfirst.frc571.emmet.Robot;

/**
 *
 */
public class ArcadeDrive extends Command {

	DriveTrain driveTrain = Robot.driveTrain;
	Joystick driveStick = Robot.oi.driveStick;
	Joystick opStick = Robot.oi.opStick;
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public ArcadeDrive() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    	if (!SmartDashboard.containsKey("SpeedNanny")) {
    		SmartDashboard.putNumber("SpeedNanny", 0.7);
    	}
    	if (!SmartDashboard.containsKey("TurnNanny")) {
    		SmartDashboard.putNumber("TurnNanny", .3);
    	}
    	double speedNanny = SmartDashboard.getNumber("SpeedNanny", 0.70);
    	double turnNanny  = SmartDashboard.getNumber("TurnNanny", .30);
    	driveTrain.arcadeDrive(-driveStick.getY()*speedNanny, (-driveStick.getThrottle()+1)*turnNanny*driveStick.getZ()); // (speed, rotation)

//    	if(driveStick.getTrigger()) {
//        	driveTrain.arcadeDrive(0.4*(-driveStick.getY()), 0.55*((driveStick.getZ()))); // (speed, rotation)
//    	}
//    	else {
//        	driveTrain.arcadeDrive(-driveStick.getY(), driveStick.getZ()*(-driveStick.getThrottle()+1)*0.5); // (speed, rotation)
//    	}
//    	driveTrain.arcadeDrive(-opStick.getY(Hand.kLeft), opStick.getX(Hand.kRight));

//    	driveTrain.drive(leftStick.getY(), rightStick.getY());
    	//System.out.println(leftStick.getZ()*(-leftStick.getThrottle()+1)*0.25);
    }// 0.5 * leftStick.getZ()

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
