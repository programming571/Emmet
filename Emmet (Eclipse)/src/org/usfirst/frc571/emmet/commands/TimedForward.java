// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc571.emmet.commands;

import org.usfirst.frc571.emmet.Robot;
import org.usfirst.frc571.emmet.RobotMap;

import edu.wpi.first.wpilibj.command.TimedCommand;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class TimedForward extends TimedCommand {

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	double timeout;
	private float driveTargetAngle;
	private double xBias;
	private double xError;
	private double speed;

	public TimedForward() {
		this(0, 0);
	}

	public TimedForward(double timeout, float driveTargetAngle) {
		super(timeout);
		this.timeout = timeout;
		this.driveTargetAngle = driveTargetAngle;
		this.speed = 0.7;
		xBias = 0;
		xError = 0;

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
		requires(Robot.driveTrain);
		
	}
	
	public TimedForward(double timeout, float driveTargetAngle, double speed) {
		super(timeout);
		this.timeout = timeout;
		this.driveTargetAngle = driveTargetAngle;
		this.speed = speed;
		xBias = 0;
		xError = 0;

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
		requires(Robot.driveTrain);

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}

	// Called just before this Command runs the first time
	@Override
	protected void initialize() {

	}

	// Called repeatedly when this Command is scheduled to run
	@Override
	protected void execute() {
		xError = SmartDashboard.getNumber("ahrs/angle", 0) - driveTargetAngle;
		// System.out.println("execute: target: " + driveTargetAngle + " angle: " +
		// ahrs.getAngle() + " error: " + xError);
		// System.out.println("execute, error: " + xError);

		if (xError > 1) {
			xBias -= 0.01;

			// System.out.println("correcting to left");
		} else if (xError < -1) {
			xBias += 0.01;

			// System.out.println("correcting to right");
		} else {
			xBias = 0;

			// System.out.println("correction done");
		}

		Robot.driveTrain.arcadeDrive(speed, xBias); // 0.7, -0.09
	}

	public boolean isFinished() {
		if (SmartDashboard.getNumber("ahrs/pitch", 0) > 20 || SmartDashboard.getNumber("ahrs/pitch", 0) < -20) {
			System.out.println("safety stop " + SmartDashboard.getNumber("ahrs/pitch", 0));
			return true;
		}
		return super.isFinished();
	}

	// Called once after isFinished returns true
	@Override
	protected void end() {
		System.out.println("TimedForward timeout: " + timeout);
		Robot.driveTrain.arcadeDrive(0, 0);
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	@Override
	protected void interrupted() {
		end();
	}
}
